import sys
import numpy as np
import math
from DataSetCreator import DataSetCreator
from pprint import pprint
import time
from HebbianLearning import HebbianLearning
from conditions.EpochAmountCondition import EpochAmountCondition
from MatrixVisualizer import MatrixVisualizer
import time
from SelfOrganizedMap import SelfOrganizedMap

def main():

    #Parameters
    epochs = 50
    alphaEtta = 3
    alphaSigma = 5
    n = 1     #debe coincidir con la longitud del vector x
    m1 = 3
    m2 = 3
    intervalInit = 0
    intervalEnd = 0

    vectorDimension = n
    amountOfVectors = 30
    randomIntegerFromZeroTo = 10

    #1) Generar los datos aleatorios Uniformes
    dataSetCreator = DataSetCreator(vectorDimension)

    #2) Guardarlos
    #vectorsDataSetLearning = dataSetCreator.getRandomDataSetOfVectors(amountOfVectors, -randomIntegerFromZeroTo, randomIntegerFromZeroTo,DataSetCreator.UNIFORM)

    #UNIFORM
    #vectorsDataSetLearning = [[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9]]
    vectorsDataSetLearning = [[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9]]
    #vectorsDataSetLearning = [[-1],[-1],[-1],[-1],[-1],[-2],[-2],[-2],[-2],[-2],[-3],[-3],[-3],[-3],[-3],[-4],[-4],[-4],[-4],[-4],[-5],[-5],[-5],[-5],[-5],[-6],[-6],[-6],[-6],[-6],[-7],[-7],[-7],[-7],[-7],[-8],[-8],[-8],[-8],[-8],[-9],[-9],[-9],[-9],[-9],[1],[1],[1],[1],[1],[2],[2],[2],[2],[2],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[5],[5],[5],[5],[5],[6],[6],[6],[6],[6],[7],[7],[7],[7],[7],[8],[8],[8],[8],[8],[9],[9],[9],[9],[9]]

    #NEGATIVES
    #vectorsDataSetLearning = [[-1],[-1],[-1],[-1],[-1],[-2],[-2],[-2],[-2],[-2],[-3],[-3],[-3],[-3],[-3],[-4],[-4],[-4],[-4],[-4],[-5],[-5],[-5],[-5],[-5],[-6],[-6],[-6],[-6],[-6],[-7],[-7],[-7],[-7],[-7],[-8],[-8],[-8],[-8],[-8],[-9],[-9],[-9],[-9],[-9]]
    #vectorsDataSetLearning = [[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9]]

    #vectorsDataSetLearning = [[1],[2],]

    #vectorsDataSet = [[1,2],[1,2],[1,2]]
    print "Vector data set " + str(vectorsDataSetLearning)

    #3) Invocar el aprendizaje de la matrix
    map = SelfOrganizedMap(epochs,alphaEtta,alphaSigma,n,m1,m2, intervalInit, intervalEnd)
    #map.matrix = np.matrix('-1 0.5 0 -0.5')
    #map.matrix = np.matrix('-1 0.5 0.4 0 -0.5 0.4 0.7 0.2 0.6')
    #print map.matrix
    map.algorithm(vectorsDataSetLearning)

    #4) Generar datos aleatorios normales
    #vectorsDataSetTesteo = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[0]]

    #vectorsDataSetTesteo = dataSetCreator.getRandomDataSetOfVectors(50, -randomIntegerFromZeroTo, randomIntegerFromZeroTo,DataSetCreator.UNIFORM)
    #vectorsDataSetTesteo = [[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9]]
    #vectorsDataSetTesteo = [[-9],[-8],[-7],[-6],[-5],[-4],[-3],[-2],[-1],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[-9]]


    #Uniforme simgle
    #vectorsDataSetTesteo = [[1],[2],[3],[4],[5],[6],[7],[8],[9]]
    vectorsDataSetTesteo = [[0],[0],[0],[0],[1],[2],[3],[4],[5],[6],[-7],[-8],[-9],[-4],[-7],[-8],[-9],[-4]]

    #Uniforme
    #vectorsDataSetTesteo = [[1],[1],[1],[1],[1],[2],[2],[2],[2],[2],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[5],[5],[5],[5],[5],[6],[6],[6],[6],[6],[7],[7],[7],[7],[7],[8],[8],[8],[8],[8],[9],[9],[9],[9],[9]]
    #vectorsDataSetTesteo = [[-1],[-1],[-1],[-1],[-1],[-2],[-2],[-2],[-2],[-2],[-3],[-3],[-3],[-3],[-3],[-4],[-4],[-4],[-4],[-4],[-5],[-5],[-5],[-5],[-5],[-6],[-6],[-6],[-6],[-6],[-7],[-7],[-7],[-7],[-7],[-8],[-8],[-8],[-8],[-8],[-9],[-9],[-9],[-9],[-9]]
    #vectorsDataSetTesteo = [[0],[0],[0],[0],[0],[-1],[-1],[-1],[-1],[-1],[-2],[-2],[-2],[-2],[-2],[-3],[-3],[-3],[-3],[-3],[-4],[-4],[-4],[-4],[-4],[-5],[-5],[-5],[-5],[-5],[-6],[-6],[-6],[-6],[-6],[-7],[-7],[-7],[-7],[-7],[-8],[-8],[-8],[-8],[-8],[-9],[-9],[-9],[-9],[-9]]

    #vectorsDataSetTesteo = [[3],[3],[3],[3],[3],[2],[2],[2],[2],[2],[1],[1],[1],[1],[1],[0],[0],[0],[0],[0],[-1],[-1],[-1],[-1],[-1],[-2],[-2],[-2],[-2],[-2],[-3],[-3],[-3],[-3],[-3],[-4],[-4],[-4],[-4],[-4],[-5],[-5],[-5],[-5],[-5],[-6],[-6],[-6],[-6],[-6],[-7],[-7],[-7],[-7],[-7],[-8],[-8],[-8],[-8],[-8],[-9],[-9],[-9],[-9],[-9]]


    #Progresivo
    #vectorsDataSetTesteo = [[1],[2],[2],[3],[3],[3],[4],[4],[4],[4],[5],[5],[5],[5],[5],[6],[6],[6],[6],[6],[6],[7],[7],[7],[7],[7],[7],[7],[8],[8],[8],[8],[8],[8],[8],[8],[9],[9],[9],[9],[9],[9],[9],[9],[9]]
    #vectorsDataSetTesteo = [[-1],[-2],[-2],[-3],[-3],[-3],[-4],[-4],[-4],[-4],[-5],[-5],[-5],[-5],[-5],[-6],[-6],[-6],[-6],[-6],[-6],[-7],[-7],[-7],[-7],[-7],[-7],[-7],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-9],[-9],[-9],[-9],[-9],[-9],[-9],[-9],[-9]]


    #Se jode
    #vectorsDataSetTesteo = [[-1],[-2],[-2],[-3],[-3],[-3],[-4],[-4],[-4],[-4],[-5],[-5],[-5],[-5],[-5],[-6],[-6],[-6],[-6],[-6],[-6],[-7],[-7],[-7],[-7],[-7],[-7],[-7],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-8],[-9],[-9],[-9],[-9],[-9],[-9],[-9],[-9],[-9]]

    #print 'vectorsDataSetTesteo: ' + str(vectorsDataSetTesteo)

    #5) Invocar la aproximacion con la matriz
    map.test(vectorsDataSetTesteo)




    #Guardar resultados.
        # Activacion de cada neurona
        #

    '''
    #Grafico de la matrixGausiana
    map = SelfOrganizedMap(1,1,1,1,10,7)
    gaussMatrix = map.proxy((4,4))
    visualizer = MatrixVisualizer(10,7)
    visualizer.visualize(gaussMatrix)
    '''

if __name__ == "__main__":
    main()
